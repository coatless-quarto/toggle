---
title: "Toggle Specific Cells"
format: 
  html:
    toc: true
    code-fold: true
    code-summary: "Show code"
filters:
  - toggle
---

This page demonstrates how to selectively enable toggle functionality
for specific code cells, rather than enabling it document-wide. This 
approach gives you precise control over which cells have toggle buttons.

## Setup

To enable selective toggle, use this minimal setup:

```yaml
---
title: "Your Document Title"
format: html
filters: [toggle]
---
```

The `filters: [toggle]` enables the toggle extension for the document
so that only cells with `toggle: true` get toggle buttons.

## Examples

### Important Results (No Toggle)

```{python}
total = 1500
target = 1200
print(f"Sales: ${total} (Target: ${target})")
```

### Details (With Toggle)

```{python}
#| toggle: true
breakdown = [400, 500, 600]
for i, amount in enumerate(breakdown, 1):
    print(f"Q{i}: ${amount}")
```

### Debug Info (Hidden by Default)

```{python}
#| toggle: true
#| output-hidden: true
print("Processing time: 2.3s")
print("Memory: 45MB")
```

## R Examples

### Key Results (No Toggle)

```{r}
scores <- c(85, 90, 78, 92)
cat("Average:", mean(scores), "\n")
```

### Analysis (With Toggle)

```{r}
#| toggle: true
scores <- c(85, 90, 78, 92)
cat("Min:", min(scores), "Max:", max(scores), "\n")
```

### Visualization (With Toggle)

```{r}
#| toggle: true
hist(c(85, 90, 78, 92), main = "Scores")
```

## Mixed Strategy

### Summary (Always Visible)

```{python}
risk = "Medium"
confidence = 89
print(f"Risk: {risk} ({confidence}% confidence)")
```

### Supporting Data (Toggle)

```{python}
#| toggle: true
factors = {"Market": 3.2, "Credit": 2.8}
for name, score in factors.items():
    print(f"{name}: {score}")
```

### Technical Notes (Hidden)

```{python}
#| toggle: true
#| output-hidden: true
print("Model v2.1.3")
print("Updated: 2024-05-28")
```

## With Code Folding

This page uses `code-fold: true` so you can control code and output independently.

### Function Example

```{python}
#| toggle: true
def growth_rate(current, previous):
    return (current - previous) / previous * 100

result = growth_rate(1500, 1200)
print(f"Growth: {result:.1f}%")
```

Use `toggle: true` for optional details. Keep key results without toggles.